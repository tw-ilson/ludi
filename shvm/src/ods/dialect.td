include "mlir/IR/OpBase.td"

def Ludi_Dialect : Dialect {
  let name = "ludi";
  let cppNamespace = "::mlir::ludi";
  let isExtensible = 1;
  let summary = "A high-level dialect for analyzing and optimizing the SHVM virtual machine for the"
                "Ludi language and compiler";
  let description = [{
    The Ludi language is a multidimensional array language based on Remora that allows you to define
    functions, perform some math computation, and print results. This dialect
    provides a representation of the language that is amenable to analysis and
    optimization.
  }];

}

class Ludi_Op<string mnemonic, list<Trait> traits = []> :
    Op<Ludi_Dialect, mnemonic, traits>;

def ConstantOp: Ludi_Op<"constant"> {
    let arguments = (ins F64ElementsAttr:$value);
    let results = (outs F64Tensor);
    let hasVerifier = 1;
    let builders = [
        OpBuilder<(ins "DenseElementsAttr":$value), [{
            // call into an autogenerated 'build' method.
            build(builder, result, value.getType(), value);
            }]>,    
        OpBuilder<(ins "double":$value)>
    ];
}

def PrintOp: Ludi_Op<"print"> {
    let arguments = (ins F64Tensor:$value);
    let assemblyFormat = "$input attr-dict `:` type($input)";
}
